import { StatusCodes } from 'http-status-codes'
import { jwtProvider } from '../providers/JwtProvider.js'
import ApiError from '../utils/ApiError.js'
import { env } from '../config/environment.js'

const isAuthorized = async (req, res, next) => {
  console.log('üîê [AUTH MIDDLEWARE] Starting authentication check...')
  console.log('üìç [AUTH MIDDLEWARE] Request URL:', req.originalUrl)
  console.log('üç™ [AUTH MIDDLEWARE] All cookies:', req.cookies)

  // l·∫•y access token t·ª´ cookie
  const accessToken = req.cookies?.accessToken
  console.log('üé´ [AUTH MIDDLEWARE] Access token present:', !!accessToken)
  console.log('üé´ [AUTH MIDDLEWARE] Access token (first 20 chars):', accessToken?.substring(0, 20) + '...')

  // n·∫øu kh√¥ng c√≥ access token th√¨ tr·∫£ v·ªÅ l·ªói
  if (!accessToken) {
    console.log('‚ùå [AUTH MIDDLEWARE] No access token found in cookies')
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Access token not found'))
    return
  }

  try {
    console.log('üîç [AUTH MIDDLEWARE] Verifying access token...')
    // th·ª±c hi·ªán gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá kh√¥ng
    const accessTokenDecoded = await jwtProvider.verifyToken(accessToken, env.ACCESS_TOKEN_SECRET)
    console.log('‚úÖ [AUTH MIDDLEWARE] Token verified successfully')
    console.log('üë§ [AUTH MIDDLEWARE] User info from token:', {
      _id: accessTokenDecoded._id,
      email: accessTokenDecoded.email
    })

    // l∆∞u th√¥ng tin user v√†o req ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c middleware kh√°c
    req.jwtDecoded = accessTokenDecoded
    next()
  } catch (error) {
    console.log('‚ùå [AUTH MIDDLEWARE] Token verification failed:', error.message)
    console.log('üîç [AUTH MIDDLEWARE] Error details:', error)

    // n·∫øu access token h·∫øt h·∫°n th√¨ s·∫Ω tr·∫£ v·ªÅ l·ªói
    if (error?.message?.includes('jwt expired')) {
      console.log('‚è∞ [AUTH MIDDLEWARE] Token expired, sending 410 status')
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token'))
      return
    }
    console.log('üö´ [AUTH MIDDLEWARE] Invalid token, sending 401 status')
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Invalid access token'))
  }
}

export const authMiddlewere = {
  isAuthorized
}